/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/branching/fork': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['changeFork'];
    post: operations['forkThread'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/thread/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addThread'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createScenario'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario-phase/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addPhase'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addObject'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getAllObjectTypes'];
    put?: never;
    post: operations['createObjectType'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-template/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addObjectTemplate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/event/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add a new event */
    post: operations['addEvent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/configuration/one': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getConfigurationOne'];
    put?: never;
    post: operations['updateConfigurationOne'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/attribute-template/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addAttributeTemplate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/association-type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all association types
     * @description Retrieves a list of all association types
     */
    get: operations['getAssociationTypes'];
    put?: never;
    /**
     * Create new association between two objects
     * @description Creates association with its label value with an ability to use hierarchical structure
     */
    post: operations['createAssociationType'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/thread/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getAllThreads'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario/one': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getScenarioById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getAllScenarios'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario-phase/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getScenarioPhases'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object/objects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getObjectsByScenarioId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-type/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getObjectType'];
    put?: never;
    post?: never;
    delete: operations['deleteObjectType'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-type/scenario/{scenarioId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getObjectTypesByScenarioId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-template/one': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getOneObjectTemplate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-template/list/scenario': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getScenarioObjectTemplates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-template/list/object-type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getTemplatesByObjectTypeId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/event/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getAllEvents'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/configuration/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getConfiguration'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/branching/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getAllBranching'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/attribute-template/one': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getOneAttributeTemplate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/attribute-template/list/template': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getObjectAttributeTemplates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/association-type/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get association type by ID
     * @description Retrieves a specific association type using its ID
     */
    get: operations['getAssociationById'];
    put?: never;
    post?: never;
    /**
     * Delete association type
     * @description Deletes an association type by its ID
     */
    delete: operations['deleteAssociationType'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator root web endpoint */
    get: operations['links'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator/metrics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator web endpoint 'metrics' */
    get: operations['metrics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator/metrics/{requiredMetricName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator web endpoint 'metrics-requiredMetricName' */
    get: operations['metrics-requiredMetricName'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator web endpoint 'info' */
    get: operations['info'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator web endpoint 'health' */
    get: operations['health'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/actuator/health/**': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Actuator web endpoint 'health-path' */
    get: operations['health-path'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/thread/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteThread'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteScenario'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/scenario-phase/delete/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteScenarioPhase'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/object-template/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteObjectTemplate'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/branching/fork/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteFork'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/attribute-template/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteObjectAttributeTemplates'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    QdsInfoForkChange: {
      /** Format: int32 */
      forkId?: number;
      title?: string;
      description?: string;
      offsprings?: components['schemas']['QdsInfoForkOffspring'][];
    };
    QdsInfoForkOffspring: {
      title?: string;
      description?: string;
    };
    QdsInfoOffspringObjectTransfer: {
      /** Format: int32 */
      id?: number;
      objectIds?: number[];
    };
    QdsResponseUpdateList: {
      entitiesToGet?: string[];
    };
    QdsInfoThreadAdd: {
      title?: string;
      description?: string;
      /** Format: int32 */
      time?: number;
    };
    QdsScenario: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      context?: string;
      purpose?: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: int32 */
      eventDuration?: number;
      /** Format: date-time */
      creationDate?: string;
      /** Format: date-time */
      lastModificationDate?: string;
    };
    QdsInfoScenarioPhaseAdd: {
      title?: string;
      description?: string;
      color?: string;
      /** Format: int32 */
      startTime?: number;
      /** Format: int32 */
      endTime?: number;
    };
    QdsScenarioPhase: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      color?: string;
      /** Format: int32 */
      startTime?: number;
      /** Format: int32 */
      endTime?: number;
      /** Format: int32 */
      scenarioId?: number;
    };
    QdsDataAttribute: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      attributeTemplateId?: number;
      initialValue?: string;
    };
    QdsDataObject: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** Format: int32 */
      templateId?: number;
      /** Format: int32 */
      objectTypeId?: number;
      attributes?: components['schemas']['QdsDataAttribute'][];
    };
    QdsObjectType: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      color?: string;
      isOnlyGlobal?: boolean;
      /** Format: int32 */
      parentId?: number;
    };
    QdsInfoAddObjectTemplate: {
      title?: string;
      description?: string;
      color?: string;
      /** Format: int32 */
      typeId?: number;
    };
    QdsDataEvent: {
      /** Format: int32 */
      id?: number;
      /**
       * Format: int32
       * @description ID of the thread in which the event takes place
       * @example 5
       */
      threadId: number;
      /** Format: int32 */
      time: number;
      /** @enum {string} */
      eventType:
        | 'GLOBAL'
        | 'NORMAL'
        | 'START'
        | 'END'
        | 'IDLE'
        | 'JOIN_OUT'
        | 'JOIN_IN'
        | 'FORK_OUT'
        | 'FORK_IN';
      /**
       * @description Description of the event
       * @example Trasa wiedzie przez zatłoczone centrum miasta na dystansie ośmiu kilometrów. W połowie drogi u VIP-a zaobserwowano pierwsze oznaki zmęczenia, manifestujące się częstym ziewaniem. Wraz z upływem czasu podróży widoczny jest spadek koncentracji obiektu oraz narastające oznaki fizycznego wyczerpania. Po dotarciu do punktu docelowego VIP opuszcza limuzyne z wyraźnymi oznakami zmęczenia, zachowując jednak pełną świadomość sytuacyjną.
       */
      description: string;
      /**
       * @description Title of the event
       * @example Transport V.I.P.
       */
      title: string;
      associationsChanges: components['schemas']['QdsInfoAssociationChange'][];
      attributeChanges: components['schemas']['QdsInfoAttributeChange'][];
    };
    QdsInfoAssociationChange: {
      /** Format: int32 */
      associationTypeId: number;
      /** Format: int32 */
      object1Id: number;
      /** Format: int32 */
      object2Id: number;
      /** @enum {string} */
      associationOperation: 'INSERT' | 'DELETE';
    };
    QdsInfoAttributeChange: {
      /** Format: int32 */
      attributeId: number;
      value: string;
    };
    QdsInfoSetting: {
      name?: string;
      value?: string;
    };
    QdsInfoForkAdd: {
      /** Format: int32 */
      forkedThreadId: number;
      /** Format: int32 */
      forkTime?: number;
      title?: string;
      description?: string;
      offsprings?: components['schemas']['QdsInfoForkOffspring'][];
    };
    QdsInfoAddAttributeTemplate: {
      name?: string;
      /** @enum {string} */
      type?: 'INT' | 'STRING' | 'DATE' | 'BOOL';
    };
    QdsAssociationType: {
      /** Format: int32 */
      id?: number;
      description?: string;
      /** Format: int32 */
      firstObjectTypeId?: number;
      /** Format: int32 */
      secondObjectTypeId?: number;
    };
    QdsUser: {
      id?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      /** @enum {string} */
      role?: 'USER' | 'ADMIN';
    };
    QdsResponseThread: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      objectIds?: number[];
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PageQdsInfoScenarioSimple: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['QdsInfoScenarioSimple'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'][];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    QdsInfoScenarioSimple: {
      title?: string;
      /** Format: int32 */
      id?: number;
      description?: string;
      /** Format: date-time */
      creationDate?: string;
      /** Format: date-time */
      lastModificationDate?: string;
    };
    SortObject: {
      direction?: string;
      nullHandling?: string;
      ascending?: boolean;
      property?: string;
      ignoreCase?: boolean;
    };
    QdsDataObjectSimple: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      scenarioId?: number;
      /** Format: int32 */
      templateId?: number;
      /** Format: int32 */
      objectTypeId?: number;
      name?: string;
    };
    PageQdsObjectType: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['QdsObjectType'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      empty?: boolean;
    };
    QdsObjectTemplate: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      color?: string;
      /** Format: int32 */
      objectTypeId?: number;
      objectType?: components['schemas']['QdsObjectType'];
    };
    PageQdsObjectTemplate: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['QdsObjectTemplate'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      empty?: boolean;
    };
    QdsObjectTemplateForObjectType: {
      /** Format: int32 */
      id?: number;
      title?: string;
      description?: string;
      color?: string;
      /** Format: int32 */
      objectTypeId?: number;
    };
    QdsConfiguration: {
      defaultEventDuration?: string;
      observerType?: components['schemas']['QdsObjectType'];
      actorType?: components['schemas']['QdsObjectType'];
      typeIds?: number[];
    };
    QdsResponseBranching: {
      /** Format: int32 */
      id?: number;
      /** @enum {string} */
      type?: 'JOIN' | 'FORK';
      comingIn?: number[];
      comingOut?: number[];
      title?: string;
      description?: string;
      /** Format: int32 */
      time?: number;
      objectTransfer?: components['schemas']['QdsInfoOffspringObjectTransfer'][];
    };
    QdsAttributeTemplate: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      objectTemplateId?: number;
      name?: string;
      /** @enum {string} */
      type?: 'INT' | 'STRING' | 'DATE' | 'BOOL';
    };
    Link: {
      href?: string;
      templated?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  changeFork: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoForkChange'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  forkThread: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoForkAdd'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  addThread: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoThreadAdd'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  createScenario: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsScenario'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsScenario'];
        };
      };
    };
  };
  addPhase: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoScenarioPhaseAdd'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsScenarioPhase'];
        };
      };
    };
  };
  addObject: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsDataObject'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsDataObject'];
        };
      };
    };
  };
  getAllObjectTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsObjectType'][];
        };
      };
    };
  };
  createObjectType: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsObjectType'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsObjectType'];
        };
      };
    };
  };
  addObjectTemplate: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoAddObjectTemplate'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
    };
  };
  addEvent: {
    parameters: {
      query?: never;
      header: {
        /** @description ID of the scenario */
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    /** @description Information about the event to add */
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsDataEvent'];
      };
    };
    responses: {
      /** @description Event added successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  getConfigurationOne: {
    parameters: {
      query: {
        setting: components['schemas']['QdsInfoSetting'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsInfoSetting'];
        };
      };
    };
  };
  updateConfigurationOne: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoSetting'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsInfoSetting'];
        };
      };
    };
  };
  addAttributeTemplate: {
    parameters: {
      query?: never;
      header: {
        templateId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsInfoAddAttributeTemplate'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
    };
  };
  getAssociationTypes: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
        hierarchical?: boolean;
        firstObjectTypeId?: number;
        secondObjectTypeId?: number;
      };
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of association types retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsAssociationType'][];
        };
      };
    };
  };
  createAssociationType: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QdsAssociationType'];
      };
    };
    responses: {
      /** @description Association type created successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsAssociationType'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsUser'];
        };
      };
    };
  };
  getAllThreads: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseThread'][];
        };
      };
    };
  };
  getScenarioById: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsScenario'];
        };
      };
    };
  };
  getAllScenarios: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PageQdsInfoScenarioSimple'];
        };
      };
    };
  };
  getScenarioPhases: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsScenarioPhase'][];
        };
      };
    };
  };
  getObjectsByScenarioId: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsDataObjectSimple'][];
        };
      };
    };
  };
  getObjectType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsObjectType'];
        };
      };
    };
  };
  deleteObjectType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getObjectTypesByScenarioId: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        scenarioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PageQdsObjectType'];
        };
      };
    };
  };
  getOneObjectTemplate: {
    parameters: {
      query?: never;
      header: {
        templateId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsObjectTemplate'];
        };
      };
    };
  };
  getScenarioObjectTemplates: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PageQdsObjectTemplate'];
        };
      };
    };
  };
  getTemplatesByObjectTypeId: {
    parameters: {
      query?: never;
      header: {
        objectTypeId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsObjectTemplateForObjectType'][];
        };
      };
    };
  };
  getAllEvents: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsDataEvent'][];
        };
      };
    };
  };
  getConfiguration: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsConfiguration'];
        };
      };
    };
  };
  getAllBranching: {
    parameters: {
      query?: never;
      header: {
        scenarioId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseBranching'][];
        };
      };
    };
  };
  getOneAttributeTemplate: {
    parameters: {
      query?: never;
      header: {
        attributeTemplateId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsAttributeTemplate'];
        };
      };
    };
  };
  getObjectAttributeTemplates: {
    parameters: {
      query?: never;
      header: {
        objectTemplateId: number;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsAttributeTemplate'][];
        };
      };
    };
  };
  getAssociationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Association type found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsAssociationType'];
        };
      };
      /** @description Association type not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
  deleteAssociationType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Association type successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Association type not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  links: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': {
            [key: string]: {
              [key: string]: components['schemas']['Link'];
            };
          };
          'application/json': {
            [key: string]: {
              [key: string]: components['schemas']['Link'];
            };
          };
          'application/vnd.spring-boot.actuator.v2+json': {
            [key: string]: {
              [key: string]: components['schemas']['Link'];
            };
          };
        };
      };
    };
  };
  metrics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': Record<string, never>;
          'application/json': Record<string, never>;
          'application/vnd.spring-boot.actuator.v2+json': Record<string, never>;
        };
      };
    };
  };
  'metrics-requiredMetricName': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        requiredMetricName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': Record<string, never>;
          'application/json': Record<string, never>;
          'application/vnd.spring-boot.actuator.v2+json': Record<string, never>;
        };
      };
    };
  };
  info: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': Record<string, never>;
          'application/json': Record<string, never>;
          'application/vnd.spring-boot.actuator.v2+json': Record<string, never>;
        };
      };
    };
  };
  health: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': Record<string, never>;
          'application/json': Record<string, never>;
          'application/vnd.spring-boot.actuator.v2+json': Record<string, never>;
        };
      };
    };
  };
  'health-path': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.spring-boot.actuator.v3+json': Record<string, never>;
          'application/json': Record<string, never>;
          'application/vnd.spring-boot.actuator.v2+json': Record<string, never>;
        };
      };
    };
  };
  deleteThread: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  deleteScenario: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
  deleteScenarioPhase: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteObjectTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteFork: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdsResponseUpdateList'];
        };
      };
    };
  };
  deleteObjectAttributeTemplates: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
