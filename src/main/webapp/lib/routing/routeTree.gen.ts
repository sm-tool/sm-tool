/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './../../app/__root';
import { Route as R500Import } from './../../app/500';
import { Route as R404Import } from './../../app/404';
import { Route as ScenarioIndexImport } from './../../app/scenario/index';
import { Route as HomeLayoutImport } from './../../app/home/_layout';
import { Route as HomeLayoutIndexImport } from './../../app/home/_layout/index';

// Create Virtual Routes

const HomeImport = createFileRoute('/home')();
const ScenarioPanelLazyImport = createFileRoute('/scenario/$panel')();

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any);

const R500Route = R500Import.update({
  id: '/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any);

const R404Route = R404Import.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any);

const ScenarioIndexRoute = ScenarioIndexImport.update({
  id: '/scenario/',
  path: '/scenario/',
  getParentRoute: () => rootRoute,
} as any);

const ScenarioPanelLazyRoute = ScenarioPanelLazyImport.update({
  id: '/scenario/$panel',
  path: '/scenario/$panel',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../app/scenario/$panel.lazy').then(d => d.Route),
);

const HomeLayoutRoute = HomeLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => HomeRoute,
} as any);

const HomeLayoutIndexRoute = HomeLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/404': {
      id: '/404';
      path: '/404';
      fullPath: '/404';
      preLoaderRoute: typeof R404Import;
      parentRoute: typeof rootRoute;
    };
    '/500': {
      id: '/500';
      path: '/500';
      fullPath: '/500';
      preLoaderRoute: typeof R500Import;
      parentRoute: typeof rootRoute;
    };
    '/home': {
      id: '/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeImport;
      parentRoute: typeof rootRoute;
    };
    '/home/_layout': {
      id: '/home/_layout';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeLayoutImport;
      parentRoute: typeof HomeRoute;
    };
    '/scenario/$panel': {
      id: '/scenario/$panel';
      path: '/scenario/$panel';
      fullPath: '/scenario/$panel';
      preLoaderRoute: typeof ScenarioPanelLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/scenario/': {
      id: '/scenario/';
      path: '/scenario';
      fullPath: '/scenario';
      preLoaderRoute: typeof ScenarioIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/home/_layout/': {
      id: '/home/_layout/';
      path: '/';
      fullPath: '/home/';
      preLoaderRoute: typeof HomeLayoutIndexImport;
      parentRoute: typeof HomeLayoutImport;
    };
  }
}

// Create and export the route tree

interface HomeLayoutRouteChildren {
  HomeLayoutIndexRoute: typeof HomeLayoutIndexRoute;
}

const HomeLayoutRouteChildren: HomeLayoutRouteChildren = {
  HomeLayoutIndexRoute: HomeLayoutIndexRoute,
};

const HomeLayoutRouteWithChildren = HomeLayoutRoute._addFileChildren(
  HomeLayoutRouteChildren,
);

interface HomeRouteChildren {
  HomeLayoutRoute: typeof HomeLayoutRouteWithChildren;
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeLayoutRoute: HomeLayoutRouteWithChildren,
};

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren);

export interface FileRoutesByFullPath {
  '/404': typeof R404Route;
  '/500': typeof R500Route;
  '/home': typeof HomeLayoutRouteWithChildren;
  '/scenario/$panel': typeof ScenarioPanelLazyRoute;
  '/scenario': typeof ScenarioIndexRoute;
  '/home/': typeof HomeLayoutIndexRoute;
}

export interface FileRoutesByTo {
  '/404': typeof R404Route;
  '/500': typeof R500Route;
  '/home': typeof HomeLayoutIndexRoute;
  '/scenario/$panel': typeof ScenarioPanelLazyRoute;
  '/scenario': typeof ScenarioIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/404': typeof R404Route;
  '/500': typeof R500Route;
  '/home': typeof HomeRouteWithChildren;
  '/home/_layout': typeof HomeLayoutRouteWithChildren;
  '/scenario/$panel': typeof ScenarioPanelLazyRoute;
  '/scenario/': typeof ScenarioIndexRoute;
  '/home/_layout/': typeof HomeLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/404'
    | '/500'
    | '/home'
    | '/scenario/$panel'
    | '/scenario'
    | '/home/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/404' | '/500' | '/home' | '/scenario/$panel' | '/scenario';
  id:
    | '__root__'
    | '/404'
    | '/500'
    | '/home'
    | '/home/_layout'
    | '/scenario/$panel'
    | '/scenario/'
    | '/home/_layout/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  R404Route: typeof R404Route;
  R500Route: typeof R500Route;
  HomeRoute: typeof HomeRouteWithChildren;
  ScenarioPanelLazyRoute: typeof ScenarioPanelLazyRoute;
  ScenarioIndexRoute: typeof ScenarioIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  R404Route: R404Route,
  R500Route: R500Route,
  HomeRoute: HomeRouteWithChildren,
  ScenarioPanelLazyRoute: ScenarioPanelLazyRoute,
  ScenarioIndexRoute: ScenarioIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/404",
        "/500",
        "/home",
        "/scenario/$panel",
        "/scenario/"
      ]
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/500": {
      "filePath": "500.tsx"
    },
    "/home": {
      "filePath": "home",
      "children": [
        "/home/_layout"
      ]
    },
    "/home/_layout": {
      "filePath": "home/_layout.tsx",
      "parent": "/home",
      "children": [
        "/home/_layout/"
      ]
    },
    "/scenario/$panel": {
      "filePath": "scenario/$panel.lazy.tsx"
    },
    "/scenario/": {
      "filePath": "scenario/index.tsx"
    },
    "/home/_layout/": {
      "filePath": "home/_layout/index.tsx",
      "parent": "/home/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
